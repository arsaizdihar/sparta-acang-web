// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String         @id @default(cuid())
    name           String
    email          String         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    participation  Participation?
    major          Major
    classYear      Int
    milestoneGroup Int?
    milestoneVote  MilestoneVote?
    kesanPesan     KesanPesan?
}

model StoredUser {
    email          String @id
    milestoneGroup Int
}

enum Major {
    IF
    STI
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    slug         String          @id
    quota19      Int
    quota20      Int
    quota21      Int
    participants Participation[]
    kesanPesan   KesanPesan[]
}

model Participation {
    userId    String   @id
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    eventSlug String
    event     Event    @relation(fields: [eventSlug], references: [slug], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@index([createdAt])
}

model Milestone {
    id    Int             @id
    votes MilestoneVote[]
}

model MilestoneVote {
    userId      String    @id
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    milestoneId Int
    milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now())
}

model KesanPesan {
    userId    String   @id
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    eventSlug String
    event     Event    @relation(fields: [eventSlug], references: [slug], onDelete: Cascade)
    createdAt DateTime @default(now())
    text      String

    @@unique([userId, eventSlug])
    @@index([createdAt])
}
